/**
 * mydeposits - Developer API
 * API services to automate Deposit Protection within your existing Property Management Software workflows and applications for both England & Wales, and also Scotland
 *
 * The version of the OpenAPI document: 1.2.2
 * Contact: api@mydeposits.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIModelsBranch from '../model/APIModelsBranch';
import APIModelsLandlordMember from '../model/APIModelsLandlordMember';
import APIModelsPaymentDetail from '../model/APIModelsPaymentDetail';
import APIModelsSubscribe from '../model/APIModelsSubscribe';
import APIResponsesBranch from '../model/APIResponsesBranch';
import APIResponsesBranchDetails from '../model/APIResponsesBranchDetails';
import APIResponsesBranchList from '../model/APIResponsesBranchList';
import APIResponsesDefaultPayment from '../model/APIResponsesDefaultPayment';
import APIResponsesErrorList from '../model/APIResponsesErrorList';
import APIResponsesLandlordMember from '../model/APIResponsesLandlordMember';
import APIResponsesPaymentDetail from '../model/APIResponsesPaymentDetail';
import APIResponsesPaymentDetailsList from '../model/APIResponsesPaymentDetailsList';

/**
* MemberAccountServices service.
* @module api/MemberAccountServicesApi
* @version 1.2.2
*/
export default class MemberAccountServicesApi {

    /**
    * Constructs a new MemberAccountServicesApi. 
    * @alias module:api/MemberAccountServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addMember operation.
     * @callback module:api/MemberAccountServicesApi~addMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesLandlordMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new member account record
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {module:model/APIModelsLandlordMember} value 
     * @param {module:api/MemberAccountServicesApi~addMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesLandlordMember}
     */
    addMember(scheme, region, value, callback) {
      let postBody = value;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling addMember");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling addMember");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling addMember");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APIResponsesLandlordMember;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberBranchCreate operation.
     * @callback module:api/MemberAccountServicesApi~memberBranchCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new branch under a corporate landlord or agent member's account record
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {module:model/APIModelsBranch} value 
     * @param {module:api/MemberAccountServicesApi~memberBranchCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesBranch}
     */
    memberBranchCreate(scheme, region, value, callback) {
      let postBody = value;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling memberBranchCreate");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling memberBranchCreate");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling memberBranchCreate");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APIResponsesBranch;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/branch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberBranchGet operation.
     * @callback module:api/MemberAccountServicesApi~memberBranchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesBranchDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request details for a given branch under the member's account
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {String} id 
     * @param {module:api/MemberAccountServicesApi~memberBranchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesBranchDetails}
     */
    memberBranchGet(scheme, region, id, callback) {
      let postBody = null;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling memberBranchGet");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling memberBranchGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling memberBranchGet");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIResponsesBranchDetails;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/branch/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberBranchList operation.
     * @callback module:api/MemberAccountServicesApi~memberBranchListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesBranchList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request all branches for a given corporate landlord or agent member
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {module:api/MemberAccountServicesApi~memberBranchListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesBranchList}
     */
    memberBranchList(scheme, region, callback) {
      let postBody = null;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling memberBranchList");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling memberBranchList");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIResponsesBranchList;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberBranchPut operation.
     * @callback module:api/MemberAccountServicesApi~memberBranchPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing branch
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {Number} id Branch ID
     * @param {module:model/APIModelsBranch} value Models.Branch
     * @param {module:api/MemberAccountServicesApi~memberBranchPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesBranch}
     */
    memberBranchPut(scheme, region, id, value, callback) {
      let postBody = value;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling memberBranchPut");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling memberBranchPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling memberBranchPut");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling memberBranchPut");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APIResponsesBranch;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/branch/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberPaymentDetailsCreate operation.
     * @callback module:api/MemberAccountServicesApi~memberPaymentDetailsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesPaymentDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Custodial only - Add repayment details under a member account record
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {module:model/APIModelsPaymentDetail} value 
     * @param {module:api/MemberAccountServicesApi~memberPaymentDetailsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesPaymentDetail}
     */
    memberPaymentDetailsCreate(scheme, region, value, callback) {
      let postBody = value;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling memberPaymentDetailsCreate");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling memberPaymentDetailsCreate");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling memberPaymentDetailsCreate");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = APIResponsesPaymentDetail;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/account/payment/detail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberPaymentDetailsDefault operation.
     * @callback module:api/MemberAccountServicesApi~memberPaymentDetailsDefaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesDefaultPayment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Custodial only - Set the default repayment details for the member's account
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {String} id ID of the payment details record that is to become the default payment object
     * @param {module:api/MemberAccountServicesApi~memberPaymentDetailsDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesDefaultPayment}
     */
    memberPaymentDetailsDefault(scheme, region, id, callback) {
      let postBody = null;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling memberPaymentDetailsDefault");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling memberPaymentDetailsDefault");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling memberPaymentDetailsDefault");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIResponsesDefaultPayment;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/account/payment/{id}/default', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the memberPaymentDetailsGet operation.
     * @callback module:api/MemberAccountServicesApi~memberPaymentDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/APIResponsesPaymentDetailsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Custodial only - Request all stored UK repayment details for a given member
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {module:api/MemberAccountServicesApi~memberPaymentDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/APIResponsesPaymentDetailsList}
     */
    memberPaymentDetailsGet(scheme, region, callback) {
      let postBody = null;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling memberPaymentDetailsGet");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling memberPaymentDetailsGet");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = APIResponsesPaymentDetailsList;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/account/payment/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeMember operation.
     * @callback module:api/MemberAccountServicesApi~subscribeMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe a member to the specified scheme
     * @param {String} scheme ID of the selected deposit protection Scheme as returned by protectionschemes method.
     * @param {String} region ID of the selected deposit protection Region as returned by protectionregions method.
     * @param {module:model/APIModelsSubscribe} value 
     * @param {module:api/MemberAccountServicesApi~subscribeMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscribeMember(scheme, region, value, callback) {
      let postBody = value;
      // verify the required parameter 'scheme' is set
      if (scheme === undefined || scheme === null) {
        throw new Error("Missing the required parameter 'scheme' when calling subscribeMember");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling subscribeMember");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling subscribeMember");
      }

      let pathParams = {
        'scheme': scheme,
        'region': region
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['mydeposits_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/{scheme}/{region}/member/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
